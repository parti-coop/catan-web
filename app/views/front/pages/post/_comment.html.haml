- is_child = local_assigns[:is_child] || false
.post-comment{ class: ('-child' if is_child) }
  = link_to smart_user_gallery_url(comment.user), class: 'userimage' do
    .userimagebg{ style: "background-image: url(#{comment.user.image.sm.url})" }
  .post-comment-main
    .body
      / comment 본문
      = link_to comment.user.nickname, smart_user_gallery_url(comment.user), class: 'usernickname'

      - if comment.almost_deleted?
        %span.screened= t('labels.almost_deleted')
      - elsif comment.blinded?(current_user)
        %span.screened= t('labels.comment_blind_info')
      - else
        != comment_format(comment.issue, comment.body)
    - if comment.file_sources_only_image.present? || comment.file_sources_only_doc.present?
      .comment-filesource-listings
        / comment 이미지
        - if comment.file_sources_only_image.present?
          .comment-filesource-image-listing{ data: { controller: 'photoswipe' } }
            - single_image_breakpoint = (is_small_screen? ? 270 : 700)
            - comment.file_sources_only_image.each_with_index do |file_source, index|

              - image_url = file_source.attachment.lg.url
              - image_photoswipe_width = file_source.image_width_lg
              - image_photoswipe_heigh = file_source.image_height_lg

              - if file_source.image_width < single_image_breakpoint
                - image_url = file_source.attachment.url
                - image_photoswipe_width = file_source.image_width
                - image_photoswipe_heigh = file_source.image_height

              - action_options = { 'data-url': image_url, 'data-original-url': download_file_source_url(file_source), 'data-width': image_photoswipe_width, 'data-height': image_photoswipe_heigh, 'data-title': comment.body.try(:truncate, 100), 'data-index': index }

              .image{ action_options, data: { target: 'photoswipe.item', action: 'click->photoswipe#open' } }
                %img{ src: file_source.attachment.xs.url }
    - if local_assigns[:child_comments]&.any?
      .post-comments.-children
        - child_comments.each do |child_comment|
          = render 'front/pages/post/comment', comment: child_comment, is_child: true
