- content_for :playground_header_content do
  = render 'front/playground_header_content/channel_menu/simple', current_issue: @current_issue, current_post: @current_post

- content_for :playground_sidebar_content do
  = render partial: 'front/posts/supplementary', locals: @supplementary_locals

= render 'front/pages/back', back_path: front_channel_path(@current_post.issue), post_id: @current_post.id

.post-box{ data: { controller: 'channel-read-emit' } }
  .post-main{ data: { controller: 'comment-form-new' } }
    - if @current_post.wiki.present? && session[:wiki_update_just_before] == true && @current_post.wiki.last_history.user == current_user && !@current_post.wiki.last_history.trivial?
      %br
      .alert.alert-secondary.text-keepall
        방금 중요한 내용을 위키에 업데이트하셨나요? 무엇을 업데이트했는지 댓글로 남겨 보세요.
        %br
        %a.btn.btn-secondary.btn-sm{ href: '#', data: { action: 'click->comment-form-new#open' } } 댓글달기
    = render 'front/posts/show/post_header/title', current_post: @current_post
    .post-content{ data: { controller: 'comment-form-sync' } }
      - files_contents = capture do
        - if @current_post.file_sources_only_image.any?
          .post-file-sources-only-image{ data: { controller: 'photoswipe justified-gallery' } }
            = render layout: 'layouts/photoswipe', locals: { file_sources: @current_post.file_sources_only_image, title: @current_post.title } do |file_source|
              %img{ src: file_source.lg_or_original_url }
        - if @current_post.file_sources_only_doc.any?
          .post-file-sources-only-doc
            - @current_post.file_sources_only_doc.each do |file_source|
              .doc{ data: { controller: 'download', download: { url: file_source.url, 'file-source-id': file_source.id, 'file-name': file_source.name }, action: 'click->download#execute' } }
                .icon
                  %i.fa.fa-floppy-o
                .body
                  %span.name= file_source.name
                  %span.size= number_to_human_size(file_source.file_size)
                .button
                  .btn.btn-sm.btn-secondary 다운로드
      - sub_contents = capture do
        - if @current_post.poll.present?
          = render 'front/posts/show/poll', poll: @current_post.poll
        - if @current_post.survey.present?
          = render 'front/posts/show/survey', survey: @current_post.survey
        - if @current_post.announcement.present?
          = render 'front/posts/show/announcement', announcement: @current_post.announcement
      - if @current_post.wiki.blank?
        .post-meta
          %span.userimage{ data: { controller: 'content-popover', 'content-popover': { url: user_front_members_path(@current_post.user), options: h({ container: '.front-app' }.to_json) } } }
            .userimagebg{ style: "background-image: url(#{@current_post.user.image.sm.url})" }
          .desc
            %span.user{ data: { controller: 'content-popover', 'content-popover': { url: user_front_members_path(@current_post.user), options: h({ container: '.front-app' }.to_json) } } }
              %span.usernickname= @current_post.user.nickname
              %span.memberrole= @current_post.user.current_group_member&.role
            .createdat
              = smart_date_tag @current_post.created_at

        .post-body
          .body
            ~ post_body_format @current_issue, @current_post.body
        = files_contents
        - if @current_post.link_source.present?
          - if @current_post.video_source?
            .post-video-source
              .content
                = video_embed_code(@current_post, 'player')
              .site
                %a{ href: @current_post.link_source.url, target: '_blank' }
                  = @current_post.link_source.site_name.try(:upcase)
                  원글보기
                  %i.fa.fa-external-link
          - else
            %a.post-link-source{ href: @current_post.link_source.url, target: '_blank' }
              - if @current_post.link_source.has_image?
                .thumbnail{ style: "background-image: url(#{@current_post.link_source.image.md.url});" }
              .content
                .title= @current_post.link_source.title_or_url
                .body= excerpt(@current_post.link_source.body, length: (is_small_screen? ? 45 : 130))
                .site
                  = @current_post.link_source.site_name.try(:upcase)
                  원글보기

                  %i.fa.fa-external-link
        = sub_contents
      - else
        -# WIKI
        .post-wiki
          = render 'front/wikis/card', current_wiki: @current_post.wiki, current_wiki_history:  @current_wiki_history
        - if files_contents.present?
          .mt-4
          = files_contents
        - if sub_contents.present?
          .mt-4
          = sub_contents

      .reactions
        .reaction
          - if user_signed_in?
            %a.link{ href: '#', data: { action: 'click->comment-form-new#open' }, class: ('-active' if @current_post.commented_by_me?) } 댓글달기
          - else
            %a.link{ href: '#', data: { action: 'sign-in-launcher#modal' } } 댓글달기

          - if @current_post.comments_count > 0
            %a.comments{ class: ('-active' if @current_post.commented_by_me?) }
              %i.fa{ class: (@current_post.commented_by_me? ? 'fa-comment' : 'fa-comment-o') }
              = trim_count(@current_post.comments_count)
        = render 'front/posts/show/upvotings/reaction', current_upvotable: @current_post

      - comment_current_wiki_history = nil
      - comment_current_wiki_history = @current_wiki_history if @current_wiki_history.present?
      - comment_current_wiki_history = @current_post.wiki.last_history if wiki_update_just_before = @current_post.wiki.present? && session[:wiki_update_just_before] == true && @current_post.wiki.last_history.user == current_user && !@current_post.wiki.last_history.trivial?

      .comments{ data: { controller: 'comment-hash', target: 'comment-form-sync.commentsContent' } }
        = render 'front/posts/show/comments', current_issue: @current_issue, current_post: @current_post, comment_current_wiki_history: comment_current_wiki_history

- session.delete(:wiki_update_just_before)


