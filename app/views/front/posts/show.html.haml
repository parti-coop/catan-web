- title_waypoint_toggler_uid = SecureRandom.uuid

- content_for :playground_header_content do
  .playground-header.-nosticky
    .channel-menu.-simple
      .title
        .node
          = link_to "# #{@current_issue.title}", front_channel_path(@current_issue), class: 'link'
          = meta_icons(@current_issue)
        - @current_post.folder&.ancestors_and_self&.each do |folder|
          .node
            .delimiter &gt;
            = link_to folder.title, front_channel_path(@current_issue, folder_id: folder.id), class: 'link'
        .post.node{ data: { 'waypoint-toggler-target': title_waypoint_toggler_uid } }
          #{@current_post.title}

- content_for :playground_sidebar_content do
  .supplementary-boxes
    = render partial: 'front/channels/supplementary', locals: @supplementary_locals

- button_groups = []

- button_groups << capture do
  - if can?(:update, @current_post) and @current_post.wiki.blank?
    = link_to '수정', edit_front_post_path(@current_post, folder_id: @current_folder&.id), class: 'dropdown-item'
  - if can?(:destroy, @current_post)
    = link_to '삭제', front_post_path(@current_post, folder_id: @current_folder&.id), method: :delete, remote: true, data: { confirm: '정말 삭제하시겠습니까?' }, class: 'dropdown-item'

- if can? :update, @current_post.wiki
  - button_groups << capture do
    - if @current_post.wiki.activatable?
      = link_to '숨긴 위키 복구하기', activate_front_wiki_post_path(@current_post, folder_id: @current_folder&.id), method: :patch, remote: true, class: 'dropdown-item'
    - if @current_post.wiki.purgeable?
      = link_to '위키 숨기기', purge_front_wiki_post_path(@current_post, folder_id: @current_folder&.id), method: :patch, remote: true, data: { confirm: '정말 숨기겠습니까?' }, class: 'dropdown-item'

- button_groups << capture do
  - if @current_post.pinned?
    .dropdown-header
      고정된 게시글입니다.
  - if can?(:pin, @current_post)
    - if @current_post.pinned?
      = link_to unpin_front_post_path(@current_post, folder_id: @current_folder&.id), method: :delete, remote: true, data: { disable_with: '...' }, class: 'dropdown-item' do
        고정 해제하기
    - else
      = link_to pin_front_post_path(@current_post, folder_id: @current_folder&.id), method: :post, remote: true, data: { disable_with: '...' }, class: 'dropdown-item' do
        이 게시글을 고정하기

- moremenu_content = capture do
  - button_groups.reject { |button_group| button_group.blank? }.each_with_index do |button_group, index|
    - if index != 0
      .dropdown-divider
    = button_group

  -# - if @current_post.can_beholder?(current_user)
  -#   %li
  -#     = link_to [:beholders, :front, @current_post], target: '_blank' do
  -#       공지 확인한 멤버 보기 (#{@current_post.beholders_count})
  -# %li
  -#   = link_to [:unbeholders, post], target: '_blank' do
  -#     확인하지 않은 가입멤버 보기

.post-box{ data: { controller: 'channel-read-emit' } }
  .post-main
    .post-header{ class: ('-wiki' if @current_post.wiki.present?), data: { controller: 'waypoint-toggler', 'waypoint-toggler': { uid: title_waypoint_toggler_uid } } }
      .main
        -# - if @current_post.poll.present?
        -#   .meta
        -#     .icon<> 투표
        -# - elsif @current_post.survey.present?
        -#   .meta
        -#     .icon<> 설문
        -# - elsif @current_post.wiki.present?
        -#   .meta
        -#     .icon<> 위키
        %h5.title= @current_post.title
        - if moremenu_content.present? && @current_post.wiki.present?
          .moremenu
            .dropdown
              %button.btn.btn-link.btn-sm{ "data-toggle": "dropdown" }
                %i.fa.fa-ellipsis-v
              .dropdown-menu.dropdown-menu-right
                = moremenu_content
        - if @current_post.need_to_read?(current_user)
          .metabox
            - last_stroked_text, last_stroked_at = @current_post.last_stroked_activity(with_creation: true) { |user| user_subject_word(user) }
            != last_stroked_text
            &nbsp;
            = smart_date_tag(last_stroked_at)
    .post-content{ data: { controller: 'comment-form-new comment-form-sync' } }
      - if @current_post.wiki.blank?
        .post-meta
          %span.userimage{ data: { controller: 'content-popover', 'content-popover': { url: user_front_members_path(@current_post.user), options: h({ container: '.front-app' }.to_json) } } }
            .userimagebg{ style: "background-image: url(#{@current_post.user.image.sm.url})" }
          .desc
            %span.usernickname{ data: { controller: 'content-popover', 'content-popover': { url: user_front_members_path(@current_post.user), options: h({ container: '.front-app' }.to_json) } } }
              = @current_post.user.nickname
            .createdat
              = smart_date_tag @current_post.created_at

          - if moremenu_content.present?
            .moremenu
              .dropdown
                %button.btn.btn-link.btn-sm{ "data-toggle": "dropdown" }
                  %i.fa.fa-ellipsis-v
                .dropdown-menu.dropdown-menu-right
                  = moremenu_content

        .post-body
          .body
            = post_body_format @current_issue, @current_post.body
        - if @current_post.file_sources_only_image.any?
          .post-file-sources-only-image{ data: { controller: 'photoswipe justified-gallery' } }
            = render layout: 'layouts/photoswipe', locals: { file_sources: @current_post.file_sources_only_image, title: @current_post.title } do |file_source|
              %img{ src: file_source.lg_or_original_url }
        - if @current_post.file_sources_only_doc.any?
          .post-file-sources-only-doc
            - @current_post.file_sources_only_doc.each do |file_source|
              .doc{ data: { controller: 'download', download: { url: file_source.url, 'file-source-id': file_source.id, 'file-name': file_source.name }, action: 'click->download#execute' } }
                .icon
                  %i.fa.fa-floppy-o
                .body
                  %span.name= file_source.name
                  %span.size= number_to_human_size(file_source.file_size)
                .button
                  .btn.btn-sm.btn-secondary 다운로드
        - if @current_post.link_source.present?
          - if @current_post.video_source?
            .post-video-source
              .content
                = video_embed_code(@current_post, 'player')
              .site
                %a{ href: @current_post.link_source.url, target: '_blank' }
                  = @current_post.link_source.site_name.try(:upcase)
                  원글보기
                  %i.fa.fa-external-link
          - else
            %a.post-link-source{ href: @current_post.link_source.url, target: '_blank' }
              - if @current_post.link_source.has_image?
                .thumbnail{ style: "background-image: url(#{@current_post.link_source.image.md.url});" }
              .content
                .title= @current_post.link_source.title_or_url
                .body= excerpt(@current_post.link_source.body, length: (is_small_screen? ? 45 : 130))
                .site
                  = @current_post.link_source.site_name.try(:upcase)
                  원글보기

                  %i.fa.fa-external-link
        - if @current_post.poll.present?
          = render 'front/posts/show/poll', poll: @current_post.poll
        - if @current_post.survey.present?
          = render 'front/posts/show/survey', survey: @current_post.survey
      - else
        -# WIKI
        .post-wiki
          = render 'front/wikis/card', current_wiki: @current_post.wiki

      .reactions
        .reaction
          - if user_signed_in?
            %a.link{ href: '#', data: { action: 'click->comment-form-new#open' }, class: ('-active' if @current_post.commented_by_me?) } 댓글달기
          - else
            %a.link{ href: '#', data: { action: 'sign-in-launcher#modal' } } 댓글달기

          - if @current_post.comments_count > 0
            %a.comments{ class: ('-active' if @current_post.commented_by_me?) }
              %i.fa{ class: (@current_post.commented_by_me? ? 'fa-comment' : 'fa-comment-o') }
              = @current_post.comments_count
        = render 'front/posts/show/upvotings/reaction', current_upvotable: @current_post

      .comments{ data: { target: 'comment-form-sync.commentsContent' } }
        = render 'front/posts/show/comments', current_issue: @current_issue, current_post: @current_post




