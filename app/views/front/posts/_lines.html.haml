- current_issue ||= local_assigns[:current_issue]
%ul.post-lines{ data: { 'controller': 'collection-activation' } }
  - posts.each do |post|
    %li.post-line{ class: ('-active' if post == current_post), data: { action: 'click->collection-activation#toggle', target: 'collection-activation.item' } }<>
      .body<>
        - unless post.blinded?(current_user)
          .title<>
            = link_to front_post_path(post, folder_id: @current_folder), class: 'link' do
              != post.title
            %span.unread{ class: ('-active' if post.unread?(current_user)) }<> N
        - else
          .title.-blind
            %i.fa.fa-info-circle
            = t('labels.post_blind_info')
        .meta
          - if post.poll.present?
            .icon<> 투표
          - elsif post.survey.present?
            .icon<> 설문
          - elsif post.wiki.present?
            .icon<> 위키

          - last_stroked_text, last_stroked_at = post.last_stroked_activity(with_creation: true) { |user| link_to(user_subject_word(user), smart_user_gallery_path(user)) }

          - if current_issue.present?
            != last_stroked_text
            = date_f(last_stroked_at)
          - else
            = link_to front_channel_path(post.issue), class: 'link' do
              \# #{post.issue.title}
            = meta_icons(post.issue)
            - if post.folder.present?
              - post.folder.ancestors_and_self.each do |folder|
                \/
                = link_to folder.title, front_channel_path(post.issue, folder_id: folder.id), class: 'link'
            = date_f(last_stroked_at)
      .footer
        .counts
          %span.upvotes{ class: ('-active' if post.upvoted_by_me?) }
            %i.fa{ class: (post.upvoted_by_me? ? 'fa-heart' : 'fa-heart-o') }
            = post.upvotes_count
          %span.comments{ class: ('-active' if post.commented_by_me?) }
            %i.fa{ class: (post.commented_by_me? ? 'fa-comment' : 'fa-comment-o') }
            = post.comments_count
        .strokedusers
          - post.stroked_post_users.limit(6).recent.each do |stroked_post_user|
            - user = stroked_post_user.user
            = link_to smart_user_gallery_url(user), class: 'userimage' do
              .userimagebg{ style: "background-image: url(#{user.image.sm.url})" }
= paginate posts, theme: 'catan'