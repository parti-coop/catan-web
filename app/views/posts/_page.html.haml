- issue = local_assigns[:issue]
- marked_read_at = issue.present? and issue.marked_read_at?(current_user)
- before_post_unread = (marked_read_at and issue.unread_post?(current_user, local_assigns[:previous_last_post_stroked_at]))

- if local_assigns[:show_unread_mark] and local_assigns[:previous_last_post_stroked_at].blank? and marked_read_at and posts.first&.unread?(current_user)
  .post-new-stroked{ class:  issue_unread_banner_dom_class(issue) }
    = link_to read_all_issue_path(issue, dom_class: issue_unread_banner_dom_class(issue)), remote: true, method: :post, class: "desc only-clickable" do
      %i.fa.fa-arrow-down
      새로 업데이트된 게시물
      .close
        모두 읽음 표시
        %span &#215;

- posts.each do |post|
  - if !post.blinded?(current_user) and !post.private_blocked?(current_user)
    - if local_assigns[:show_unread_mark] and marked_read_at and before_post_unread and !post.unread?(current_user)
      .post-new-stroked{ class:  issue_unread_banner_dom_class(issue) }
        = link_to read_all_issue_path(issue, dom_class: issue_unread_banner_dom_class(issue)), remote: true, method: :post, class: "desc only-clickable" do
          %i.fa.fa-arrow-up
          새로 업데이트된 게시물
          .close
            모두 읽음 표시
            %span &#215;
    .post-card__content
      - post_card_dom_id = "post-card-#{SecureRandom.uuid}"
      .post-card.js-lazy-partal-load{ id: post_card_dom_id, data: { url: post_url(post, subdomain: current_group.try(:subdomain), dom_id: post_card_dom_id, assigns: to_json_primitive_only(local_assigns.merge(mode: 'list')), format: :js) } }
        .skeletons
          .skeleton-user
            .skeleton-user-icon
            .skeleton-user-meta
              .skeleton-user-nickname
              .skeleton-post-date
          %ul.list-unstyled
            - 4.times do
              %li.skeleton-item{ style: "width: #{[70, 100, 80].sample}%;" }

    - before_post_unread = post.unread?(current_user)
