.front-navbar{ data: { controller: ('watermark' unless Rails.env.production?), 'watermark-text': Rails.env } }

  - if current_group.private_blocked?(current_user)
    .centermenu.dummy
  - else
    = form_with url: '#', method: :get, class: 'centermenu', data: { controller: 'front-search', action: 'submit->front-search#submitForm' } do |f|
      - front_search_issue_id = @current_issue&.id
      - front_search_folder_id = @current_folder&.id
      .dropdown{ data: { controller: 'phone-dropdown' } }
        = f.text_field 'front_search[q]', value: PostSearchableIndex.sanitize_search_key(params.dig(:front_search, :q)), class: 'queryinput fa', placeholder: raw('&#xf002 검색'), autocomplete: 'off', data: { target: 'front-search.searchQueryField', action: 'input->front-search#updateQueryField focus->front-search#updateQueryField blur->front-search#blurQueryField keydown@document->front-search#upAndDownMenuItem', toggle: 'dropdown-toggle' }
        .dropdown-menu{ 'data-target': 'front-search.menu' }
          - if front_search_folder_id.present?
            .dropdown-item{ data: { 'front-search-url': front_channel_path(id: front_search_issue_id, folder_id: front_search_folder_id), target: 'front-search.menuItem front-search.menuItem', action: 'mouseenter->front-search#mouseEnterMenuItem click->front-search#clickMenuItem' } }
              %span.text{ 'data-target': 'front-search.menuItemText' }
              %span.scope 폴더 내 검색
          - if front_search_issue_id.present?
            .dropdown-item{ data: { 'front-search-url': front_channel_path(id: front_search_issue_id), target: 'front-search.menuItem front-search.menuItem', action: 'mouseenter->front-search#mouseEnterMenuItem click->front-search#clickMenuItem' } }
              %span.text{ 'data-target': 'front-search.menuItemText' }
              %span.scope 채널 내 검색
          .dropdown-item{ data: { 'front-search-url': front_all_path, target: 'front-search.menuItem front-search.menuItem', action: 'mouseenter->front-search#mouseEnterMenuItem click->front-search#clickMenuItem' } }
            %span.text{ 'data-target': 'front-search.menuItemText' }
            %span.scope 그룹 내 검색

  .groupmenus
    .homeitem
      = link_to current_group.title, root_url, class: 'link'
      = meta_icons(current_group)
    - if current_group.member?(current_user) || current_user&.admin?
      .dropdown{ data: { controller: 'phone-dropdown' } }
        .toggle.cursor-pointer{ "data-toggle": "dropdown" }
          %i.fa.fa-ellipsis-h
        .dropdown-menu
          - group_menus = capture do
            - if current_group.organized_by?(current_user) || current_user&.admin?
              = link_to edit_front_group_path(current_group), class: 'dropdown-item' do
                그룹 관리
            - if current_group.organized_by?(current_user) || current_user&.admin?
              = link_to group_members_path, class: 'dropdown-item', target: '_blank' do
                멤버 관리
                %i.fa.fa-external-link
            - if current_group.organized_by?(current_user) || current_user&.admin?
              = link_to edit_current_group_front_categories_path, class: 'dropdown-item' do
                채널 카테고리 관리
            - if current_group.creatable_issue?(current_user) || current_user&.admin?
              = link_to new_front_channel_path, class: 'dropdown-item' do
                채널 만들기
            - if current_group.organized_by?(current_user) || current_user&.admin?
              = link_to front_labels_path, class: 'dropdown-item' do
                라벨 관리

          = group_menus

          - if current_group.member?(current_user)
            - if group_menus.present?
              .dropdown-divider
            = link_to edit_me_front_members_path, class: 'dropdown-item' do
              내 프로필
            = link_to "#{current_group.title} 그룹 탈퇴", front_member_cancel_path(current_user.smart_group_member(current_group)), method: :delete, class: 'dropdown-item', data: { confirm: "정말 #{current_group.title} 그룹에서 탈퇴하시겠습니까? 그룹에 게시한 글은 모두 보존되며 빠띠 가입도 유지됩니다." }

  .profilemenus
    - if user_signed_in? && current_group&.member?(current_user)
      = render 'layouts/front/messages'

    - if user_signed_in?
      .dropdown{ data: { controller: 'phone-dropdown' } }
        .userimage{ "data-toggle" => "dropdown", :href => "#" }
          .userimagebg{ style: "background-image: url(#{current_user.image.sm.url})" }
        .dropdown-menu.usermenu.dropdown-menu-right
          = link_to '계정 설정', edit_user_registration_path, class: 'dropdown-item'
          = link_to '로그아웃', destroy_user_session_path, method: :delete, class: 'dropdown-item'
          - member_groups = current_user.member_groups.sibilings(current_group).load
          - member_groups.each_with_index do |group, index|
            - if index == 0
              .dropdown-divider
              .dropdown-header
                내 그룹
            = link_to root_url(subdomain: group.subdomain), class: 'dropdown-item', target: ('_blank' if group != current_group) do
              = group.title
              - if group != current_group
                %i.fa.fa-external-link.small.text-muted
              - if group == current_group
                %i.fa.fa-check
          - if current_group.organization.default?
            .dropdown-divider
            = link_to issues_url(subdomain: nil), class: 'dropdown-item', target: '_blank' do
              다른 그룹 탐색
              %i.fa.fa-external-link.small.text-muted
            = link_to new_group_configuration_url(subdomain: nil), class: 'dropdown-item', target: '_blank' do
              그룹 만들기
              %i.fa.fa-external-link.small.text-muted
    - else
      -# .menuitem
      -#   = link_to issues_url(subdomain: nil), target: '_blank', class: 'link' do
      -#     다른 그룹 탐색
      -#     %i.fa.fa-external-link.small
      .menuitem
        = link_to '멤버 가입', pre_sign_up_front_users_path, class: 'link'
      .menuitem
        = link_to '로그인', new_user_session_path, class: 'link'
